Class nasıl oluşturulurdu?
Python'da __init__ metodu, bir sınıfın örneği (instance) oluşturulduğunda otomatik olarak çağrılan özel bir metottur. Bu metod, sınıfın özelliklerini başlatmak (initialize) için kullanılır.

class MyClass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

# Örnek oluşturma
obj = MyClass('value1', 'value2')
print(obj.param1)  # Output: value1
print(obj.param2)  # Output: value2

__init__ metodu param1 ve param2 argümanlarını alıp bunları self.param1 ve self.param2 olarak atar. Bu sayede, MyClass sınıfından oluşturulan her örnek bu değerlere sahip olur.

*******************************************************************************************************************************************************************************************

tkinter, Python'da grafiksel kullanıcı arayüzleri (GUI) oluşturmak için kullanılan standart bir kütüphanedir.
tkinter ile pencereler, düğmeler, etiketler, giriş kutuları gibi çeşitli bileşenler oluşturabilir ve kullanıcı etkileşimlerini işleyebilirsiniz.
Örnek;
import tkinter as tk

# Ana pencereyi oluştur
root = tk.Tk()
root.title("Tkinter Örneği **_** ")

# Bir etiket oluştur ve pencereye ekle
label = tk.Label(root, text="Merhaba, Tkinter!")
label.pack()

# Pencereyi çalıştır
root.mainloop()  //while döngüsü gibi sonsuz o işlemin gerçekleşmesini sağlar.

*****************************************************************************************************************************************************************************************

button.grid() metodu, tkinter kütüphanesinde kullanılan bir yerleşim yöneticisidir. Bu metot, bir düğmenin (veya başka bir widget'ın) bir ızgara (grid) düzeninde yerleştirilmesini sağlar. Widget'ı belirli bir satır ve sütun konumuna yerleştirir.

import tkinter as tk
root = tk.Tk()
button = tk.Button(root, text="Click Me")
button.grid(row=0, column=0)  # Düğmeyi 0. satır ve 0. sütuna yerleştirir
root.mainloop()

pack(): Widget'ları belirli bir sırayla yerleştirir. Varsayılan olarak üstten alta doğru hizalar.
place(): Widget'ları kesin koordinatlara yerleştirir.

import tkinter as tk
root = tk.Tk()
# pack() örneği
button1 = tk.Button(root, text="Button 1")
button1.pack(side=tk.LEFT)
# place() örneği
button2 = tk.Button(root, text="Button 2")
button2.place(x=50, y=50)
root.mainloop()

***************************************************************************************************************************************************************************************

Tkinter Canvas'ın içine nasıl metin eklenir?
Canvas, şüphesiz Tkinter'daki en çok yönlü widget'lardan biridir . Canvas ile şekiller, metinler oluşturabilir, animasyonlar oluşturabilir, 3B şekiller modelleyebilir, simülasyonlar modelleyebilir ve daha fazlasını yapabiliriz.
Bir tkinter çerçevesinin içine metin eklemek için create_text() metodunu kullanabiliriz . create_text() metodunu font, text ve create_text(x,y,font, text, options….) gibi diğer seçeneklerin değerlerini ekleyerek tanımlayabiliriz .

from tkinter import *

win= Tk()
win.geometry("750x280")
canvas= Canvas(win, width= 1000, height= 750, bg="SpringGreen2")
canvas.create_text(300, 50, text="HELLO WORLD", fill="black", font=('Helvetica 15 bold'))
canvas.pack()

win.mainloop()

**************************************************************************************************************************************************************************************

age: int
name: str
height: float
is_human: bool

def police_check(age: int) -> bool: # -> işareti, fonksiyonların dönüş tipini belirtmek için kullanılır. Bu işaret, bir fonksiyonun hangi türde bir değer döndüreceğini belirtmek için fonksiyon tanımında yer alır.
    if age > 18:
        can_drive = True
    else:
        can_drive = False
    return can_drive


if police_check(12):
    print("You may pass")
else:
    print("Pay a fine.")

************************************************************************************************************************************************************************************

Tkinter düğmeleri nasıl devre dışı bırakılır?
from tkinter import *

root = Tk() 
root.geometry("200x100")
exit_button = Button(root, text="Exit", command=root.destroy) 
exit_button.pack(pady=20) 
  
root.mainloop() 

**********************************************************************************************************************************************************************************
